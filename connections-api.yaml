openapi: 3.1.0
info:
  title: Versori Connections API
  version: 0.0.1
  license:
    name: UNLICENSED
    identifier: UNLICENSED
  description: |
    The Connections API is a RESTful API that allows you to connect to your external systems to the Versori Platform.

    Connections are split into the following components:
      - Protocol
      - Authentication Scheme
      - Environments
      - Global Parameters
      - Actions
      - Triggers
      - Definitions

    ## Protocol

    The protocol defines the transport mechanism used to communicate with your external system. 

    Currently we support the following protocols:
      - HTTP
      - BigQuery

    ## Authentication Scheme

    The authentication scheme defines how the Versori Platform will authenticate with your external system. Different 
    schemes are applicable to different protocols.

    ### HTTP

    The following authentication schemes are supported for HTTP:
      - OAuth 2.0
      - OIDC
      - API Key (in header, query or cookie)
      - Basic
      - Bearer

    ### BigQuery

    The following authentication schemes are supported for BigQuery:
      - OAuth 2.0
      - Google service account JSON key file

    ## Environments

    Each Connection has at least one environment and additional environments can be added. Environments are used to 
    connect to different instances of your external system. For example, you may have a development, staging and
    production environment, each with different credentials and addresses. 

    Each Environment must provide a Credential which satisfies one authentication scheme for the Connection.

    Environments can define variables, which can be used to customise certain aspects of the Connection such as 
    default values for certain fields/parameters

    Finally, some protocols may require specific configuration for each environment. For example, the HTTP Protocol
    requires a base URL for each environment.

    ## Global Parameters

    Global Parameters allows a user to configure a set of parameters which can be used across multiple Actions. Within 
    the UI, whenever a user starts to create a new Action the UI will pre-populate the Action with the Global 
    Parameters. If the Action in question does not require any of these parameters the user may delete them before 
    saving.

    When a user creates, updates or deletes a global parameter, the user will be prompted to choose which Actions should
    reflect the change, with the ability to choose all, some or none.

    ### HTTP Parameters

    For HTTP Connections, the following parameter types may be set as Global Parameters:

    - Path parameters
    - Query parameters
    - Headers

    ## Actions

    Actions define the actions that can be performed on your external system. An action may be defined and implemented
    differently depending on the protocol. For example, an HTTP Action contains a method like GET, PUT, POST etc., 
    whereas a BigQuery Actions will contain a SQL query.

    ### HTTP

    For HTTP Connections, each Action defines a single HTTP request. 

    The Action can contain inputs to customise the request, some inputs may also allow default values which can be 
    overridden when used within other Versori products. Default values can be defined using environment variables.

    The supported HTTP inputs are:

    - Path parameters
    - Query parameters
    - Headers
    - Request body Definitions (one per supported media-type)

    The Action can also define outputs:

    - Headers
    - Status Codes, and their associated Response body Definitions (one per supported media-type)

    ### BigQuery SQL

    BigQuery SQL Actions are defined as SQL queries. The query can contain parameters to customise the query at 
    runtime, for example in Switchboard a user may use literal values or Selectors to provide the parameters. This 
    functionality is provided via the [query](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query) API 
    endpoint.

    When creating a BigQuery SQL Action, the associated Definition is automatically created based on the query.

    ## Triggers

    Triggers define how the Versori Platform will be notified of events from your external system. Each Protocol 
    determines how Triggers are defined since how they are implemented may vary.

    ### HTTP Triggers

    These are essentially webhooks, which an external service may invoke to notify the Versori Platform of an event.
    They are modelled similarly to to HTTP Actions, but Versori expects a certain request and allows the user to 
    configure the response.

    In the future, you will also be able to define HTTP Trigger Lifecycles, which define how a webhook is 
    created/deleted on the external system when a Switchboard integration is published/unpublished. However, this is 
    out of scope for the initial release.

    ### BigQuery Triggers

    BigQuery Triggers are not supported directly, but will be handled in the future by the PubSub Protocol. This is an
    additional Protocol on the roadmap, which will allow users to build integrations with Google Cloud PubSub. Users
    will be able to build integrations that respond to PubSub events, and configure their own BigQuery Jobs to 
    publish to these PubSub topics within their own infrastructure (we also plan to support similar functionality within 
    Caspian as "Caspian Triggers", but again this is out of scope for initial release). 

    ## Definitions

    Definitions provide the Versori Platform the information required to validate and provide auto-complete behaviour
    when dealing with input/output data between connections.

    Each definition has a media-type and an associated schema. Which schema implementation is used depends on the 
    media-type, we initially support the following:

    - `application/json`, defined by JSON Schemas.
    - `text/xml`, defined by XML Schema Definitions (XSDs).
    - `text/csv`, defined by TBD.

    ## Versioning

    Except for the top-level Connection data and their Environments, other aspects of a Connection such as Actions, 
    Triggers and Definitions are versioned resources. A connection can have multiple versions and each version can 
    either be in "draft" or "published" state. A version is published if its `publishedAt` field is not null.

    Versions are defined as an arbitrary string, but users are encouraged to follow a consistent versioning scheme such 
    as SemVer, CalVer, or an incrementing number.

    Connections may only be used by Versori products if they are published, and once published they are immutable. If 
    an edit is attempted against a published version then an error will be returned. Unpublished Connections are 
    considered to be in "draft" and can be edited as many times as required.

    Connections may be unpublished, but only when they are not referenced by any other system (see 
    [Subscribers](#Subscribers) below).

    ### Special Versions

    There are two reserved words to reference a published version, "latest" and "default". "latest" will always return
    the latest published version according to it's `publishedAt` field, whereas "default" will return the version which 
    has been set as such by the user. If the user never specifies a default version, the "latest" published version will
    be used.

    ### Publishing Versions

    When a new version is published, the user should be prompted to choose how Versori products should handle the 
    update. For example, for Switchboard the user should be able to choose whether to update existing integrations to
    use the new version, or to leave them as they are. To facilitate this UX the Connections API has the concept of
    subscriptions (is there a better name?) where other internal APIs can register their interest in a Connection.

    ## Subscribers

    A Connection has the concept subscribers, where other products can notify the Connections API of their interest in
    that connection. This allows the Connections API to check whether a Connection is being used by other products and
    prevent deletion if so.

    ### Switchboard

    When a board is published, the Switchboard orchestrator will subscribe to the Connection. When that board is then
    unpublished, the orchestrator will unsubscribe from the Connection.

    ## Completions

    Completions is an advanced feature of the Connections API which enables Connection authors to define how a 
    particular field within a Definition may be auto-completed. This is useful for fields which are almost always a 
    fixed value but whose valid values are determined by how the external system is configured. i.e. the `channel` 
    field in a Slack `postMessage` call must be a valid channel name for the Slack Workspace in which the Connection 
    is connecting to.

    There are different mechanisms for defining Completions which are described below.

    ### Static Completions

    Static Completions are defined by the Connection author and are a fixed list of values. For JSON Definitions, this
    is automatically generated by properties with the `enum` keyword. Other media-types will have their own mechanisms
    which may or may not be directly supported by their schema implementation.

    ### Remote Completions

    Remote Completions make a connection to an external API to retrieve the valid values for a field. Initially a 
    Completion can be defined by choosing another Connection Action, and a transformation on how to extract the 
    values to present to the user.
tags:
  - name: auth-schemes
    description: |
      Auth Schemes are the mechanism by which the Connections API authenticates with external systems. They define how 
      Actions and Triggers are authenticated. Not all Auth Schemes are supported by all Protocols, you can use the 
      /o/{organisation_id}/protocols/{protocol_name}/auth-schemes endpoint to determine which Auth Schemes are supported
      for each Protocol.
  - name: connections
    description: |
      Connections are the core resource of the Connections API. They represent a connection to an external system, 
      and contain all the information required to interact with that system. This includes Actions, Triggers and 
      Definitions.
  - name: credentials
    description: |
      Credentials are the mechanism by which the Connections API authenticates with external systems. They define how 
      Actions and Triggers are authenticated. Which Credentials are supported depends on the Auth Scheme chosen, which 
      again is determined by the Protocol.
  - name: protocols
    description: |
      Protocols are the mechanism by which the Connections API communicates with external systems. They define how 
      Actions, Triggers and Definitions are implemented.
  - name: protocol-http
    description: |
      The HTTP Protocol allows the Connections API to communicate with external systems via HTTP requests.
  - name: protocol-bigquery
    description: |
      The BigQuery Protocol allows the Connections API to communicate with BigQuery datasets via the BigQuery API.
servers:
  - description: Production
    url: "https://platform.versori.com/api/connections/v1alpha1"
  - description: Staging
    url: "https://platform-staging.versori.com/api/connections/v1alpha1"
  - description: Development
    url: "http://localhost:9001"
paths:
  /o/{organisation_id}/connections:
    parameters:
      - $ref: "#/components/parameters/organisation_id"
    get:
      operationId: ListConnections
      summary: List Connections
      description: |
        ListConnections returns a paginated list of Connections, ordered with most recently updated first. 
        Customising the sort behaviour is not currently supported but may be added in the future. Similarly 
        with filtering, this will be implemented in a future release.
      tags:
        - connections
      parameters:
        - $ref: "#/components/parameters/first"
        - $ref: "#/components/parameters/after"
        - $ref: "#/components/parameters/before"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionPage"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /o/{organisation_id}/connections/{connection_id}:
    parameters:
      - $ref: "#/components/parameters/organisation_id"
      - $ref: "#/components/parameters/connection_id"
    get:
      operationId: GetConnection
      summary: Get Connection
      description: |
        GetConnection returns a single Connection for the specified ID. If one does not exist then a 404 will be returned.
      tags:
        - connections
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: UpdateConnection
      summary: Update Connection
      description: |
        UpdateConnection updates a Connection with the specified request body. All mutable fields are updated as per the
        request body, and the `updatedAt` field is set to the current time. Any missing fields will be unset unless this
        causes a validation error, in which case the request will fail with a 400 Bad Request response.
      tags:
        - connections
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Connection"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connection"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: DeleteConnection
      summary: Delete Connection
      description: |
        DeleteConnection deletes a Connection with the specified ID. If the Connection is in use by another product then
        a 409 Conflict response will be returned. If the Connection does not exist then a 404 Not Found response will be
        returned.

        A connection can be forcefully deleted with the `force` query parameter. This will delete the connection even if
        it is in use by another product. This should only be used in exceptional circumstances and may cause other 
        issues externally.
      tags:
        - connections
      parameters:
        - name: force
          in: query
          required: false
          schema:
            type: boolean
          description: Force informs the API to delete the connection even if it has active subscriptions.
      responses:
        "204":
          description: No Content
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /o/{organisation_id}/connections/{connection_id}/versions:
    parameters:
      - $ref: "#/components/parameters/organisation_id"
      - $ref: "#/components/parameters/connection_id"
    get:
      operationId: ListConnectionVersions
      summary: List Connection Versions
      description: |
        ListConnectionVersions returns a page of ConnectionVersions ordered by most recently updated first. Customising 
        the sort behaviour is not currently supported but may be added in the future. Similarly with filtering, this
        will be implemented in a future release.
      tags:
        - connections
      parameters:
        - $ref: "#/components/parameters/first"
        - $ref: "#/components/parameters/after"
        - $ref: "#/components/parameters/before"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectionVersionsPage"
        "404":
          description: Not Found. Either the organisation or connection does not exist for this request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /o/{organisation_id}/credentials:
    parameters:
      - $ref: "#/components/parameters/organisation_id"
    get:
      operationId: ListCredentials
      summary: List Credentials
      description: |
        ListCredentials returns a paginated list of Credentials, ordered with most recently updated first. 
        Customising the sort behaviour is not currently supported but may be added in the future. Similarly 
        with filtering, this will be implemented in a future release.
      tags:
        - credentials
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CredentialsPage"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /o/{organisation_id}/protocols:
    parameters:
      - $ref: "#/components/parameters/organisation_id"
    get:
      operationId: ListProtocols
      summary: List Protocols
      description: |
        ListProtocols returns all the supported Protocols for this organisation. If a desired Protocol is not listed
        then please contact support@versori.io to request it be added.
      tags:
        - protocols
      parameters:
        - $ref: "#/components/parameters/first"
        - $ref: "#/components/parameters/after"
        - $ref: "#/components/parameters/before"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProtocolPage"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /o/{organisation_id}/protocols/http/connections:
    parameters:
      - $ref: "#/components/parameters/organisation_id"
    post:
      operationId: CreateHTTPConnection
      summary: Create HTTP Connection
      description: |
        CreateHTTPConnection creates a new HTTP Connection. By default the Connection will be created in a draft state
        and will need to be published before it can be used by other Versori products.
      tags:
        - connections
        - protocol-http
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HTTPConnectionCreate"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPConnection"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /o/{organisation_id}/protocols/{protocol_slug}/auth_schemes:
    parameters:
      - $ref: "#/components/parameters/organisation_id"
      - $ref: "#/components/parameters/protocol_slug"
    get:
      operationId: ListAuthSchemes
      summary: List Auth Schemes
      description: |
        ListAuthSchemes returns all the supported Auth Schemes for the provided Protocol within this organisation. If a 
        desired Auth Scheme is not listed then please contact support@versori.io to request it be added.
      tags:
        - protocol-http
        - auth-schemes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthSchemePage"
        "404":
          description: Not Found. The organisation or protocol does not exist for this request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /o/{organisation_id}/protocols/bigquery/connections:
    parameters:
      - $ref: "#/components/parameters/organisation_id"
    post:
      operationId: CreateBigQueryConnection
      summary: Create BigQuery Connection
      description: |
        CreateBigQueryConnection creates a new BigQuery Connection. By default the Connection will be created in a 
        draft state and will need to be published before it can be used by other Versori products.
      tags:
        - connections
        - protocol-bigquery
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BigQueryConnectionCreate"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BigQueryConnection"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /o/{organisation_id}/auth-schemes/oauth2/callback:
    parameters:
      - $ref: "#/components/parameters/organisation_id"
    get:
      operationId: HandleOAuth2ConnectionCallback
      summary: Handle OAuth2 Connection Callback
      description: |
        HandleOAuth2ConnectionCallback is the callback endpoint for OAuth2 Connections to exchange an authorization code
        for an access token. Since this is an API and not a front-end application, OAuth2 Applications should not 
        redirect to this URL, but should be redirected to a front-end application which can then call this endpoint via 
        XHR to complete the flow.
      tags:
        - auth-schemes
      parameters:
        - name: code
          in: query
          description: The authorization code returned by the OAuth2 provider.
          required: true
          schema:
            type: string
        - name: state
          in: query
          description: The state value returned by the OAuth2 provider.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
security:
  - cookie: []
components:
  schemas:
    PageInfo:
      type: object
      properties:
        totalCount:
          type: integer
        next:
          type: string
        prev:
          type: string
      required:
        - totalCount
    InferredReference:
      description: |
        InferredReference is an object with just a single `id` property which is used to reference another object. The 
        context surrounding the InferredReference will determine the type of the object.
      type: object
      properties:
        id:
          type: string
      required:
        - id
    CredentialType:
      description: |
        CredentialType denotes the type of the credential which determines what the Credential's `data` property will 
        contain.

        - none: No credential is required to authenticate with the Connection.
        - raw: The credential is a raw value to be interpreted by the AuthScheme, this could be string API key or a 
          binary file such as a private key etc.
        - basic-auth: The credential is a username and password to be used for basic authentication.
        - oauth2-client: The credential is an OAuth2 client ID and secret to be used for OAuth2 authentication.
        - oauth2-token: The credential is an OAuth2 access_token to be used for OAuth2 authentication.
      type: string
      enum:
        - none
        - raw
        - basic-auth
        - oauth2-client
        - oauth2-token
    CredentialDataNone:
      description: |
        CredentialDataNone contains no data as no credential is required to authenticate with the Connection. It is used
        purely as a placeholder to implement a consistent interface across all CredentialType/AuthSchemeTypes.
      type: object
      additionalProperties: false
    CredentialDataAPIKey:
      description: |
        CredentialDataAPIKey contains the API key required to authenticate with the Connection. This value will be
        redacted when returned in a response.
      type: object
      properties:
        apiKey:
          type: string
          description: |
            APIKey is the API Key used to authenticate with the Connection.
      required:
        - apiKey
    CredentialDataBasicAuth:
      description: |
        CredentialDataBasicAuth contains the username and password required to authenticate with the Connection. The 
        `password` property will be redacted when returned in a response.
      type: object
      properties:
        username:
          type: string
          description: |
            Username is the username used to authenticate with the Connection.
        password:
          type: string
          description: |
            Password is the password used to authenticate with the Connection.
      required:
        - username
        - password
    CredentialDataOAuth2Client:
      description: |
        CredentialDataOAuth2Client contains the OAuth2 client credentials required to either issue an access token from 
        a refresh_token, or via the `client_credentials` grant type. The `clientSecret` property will be redacted when
        returned in a response.
      type: object
      properties:
        clientId:
          type: string
          description: |
            ClientID is the OAuth2 client ID used to authenticate with the Connection.
        clientSecret:
          type: string
          description: |
            ClientSecret is the OAuth2 client secret used to authenticate with the Connection.
        scopes:
          type: array
          items:
            type: string
          description: |
            Scopes is a list of scopes which should be requested when issuing an access token. This is only required if
            this credential is being used on a `client_credentials` grant type, for `authorization_code` grant types the
            requested scopes come from the `CredentialDataOAuth2Token` credential.
      required:
        - clientId
        - clientSecret
      x-ogen-properties:
        clientId:
          name: ClientID
    CredentialDataOAuth2Token:
      description: |
        CredentialDataOAuth2Token is primarily used to store the refresh_token for an user who has authorized an OAuth2
        Application to access their data. However, this information is not exposed publicly and the only data visible 
        via the API are the `scopes` which the user has granted consent for. This can be used to determine whether
        the user should be prompted to re-authorize the application with additional scopes in the event they choose to 
        use a new endpoint which requires additional scopes to what they've already consented to.
      type: object
      properties:
        scopes:
          type: array
          items:
            type: string
          description: |
            Scopes is a list of scopes which the user has granted consent for.
        isValid:
          type: boolean
          description: |
            IsValid is a boolean value which indicates whether the token is valid or not. This is used to determine
            whether the user should be prompted to re-authorize the application in the event the token is no longer
            valid.
      required:
        - scopes
        - isValid
    Credential:
      description: |
        Credential contains the information required to authenticate with a Connection.
      type: object
      properties:
        id:
          description: ID is the unique identifier of the Credential.
          type: string
          format: ulid
        type:
          $ref: "#/components/schemas/CredentialType"
        name:
          description: |
            Name is the name of the Credential.
          type: string
        authSchemeConfig:
          $ref: "#/components/schemas/AuthSchemeConfig"
        data:
          type: object
          oneOf:
            - $ref: "#/components/schemas/CredentialDataNone"
            - $ref: "#/components/schemas/CredentialDataAPIKey"
            - $ref: "#/components/schemas/CredentialDataBasicAuth"
            - $ref: "#/components/schemas/CredentialDataOAuth2Client"
            - $ref: "#/components/schemas/CredentialDataOAuth2Token"
      required:
        - id
        - type
        - name
        - authSchemeConfig
        - data
    CredentialSummary:
      description: |
        CredentialsSummary contains a single Credential with additional information about the Connections it is used in.
      type: object
      allOf:
        - $ref: "#/components/schemas/Credential"
        - type: object
          properties:
            connections:
              type: array
              items:
                $ref: "#/components/schemas/Connection"
          required:
            - connections
    CredentialsPage:
      type: object
      allOf:
        - $ref: "#/components/schemas/PageInfo"
        - type: object
          properties:
            credentials:
              type: array
              items:
                $ref: "#/components/schemas/CredentialSummary"
          required:
            - credentials
    CredentialCreate:
      description: |
        CredentialCreate contains the information required to create a new Credential. 

        In order to create an OAuth2Token credential, an empty credential defining the scopes must be created first, 
        then use the `HandleOAuth2ConnectionCallback` operation can be executed after the user has been redirected back 
        to the callback URL.
      type: object
      properties:
        type:
          $ref: "#/components/schemas/CredentialType"
        name:
          description: |
            Name is the name of the Credential.
          type: string
        data:
          type: object
          oneOf:
            - $ref: "#/components/schemas/CredentialDataNone"
            - $ref: "#/components/schemas/CredentialDataAPIKey"
            - $ref: "#/components/schemas/CredentialDataBasicAuth"
            - $ref: "#/components/schemas/CredentialDataOAuth2Client"
            - $ref: "#/components/schemas/CredentialDataOAuth2Token"
    EnvironmentVariable:
      description: |
        EnvironmentVariable denotes an arbitrary key/value pair which can be used to configure a connection.
      type: object
      properties:
        name:
          type: string
          description: |
            Name is the name of the environment variable.
        value:
          type: string
          description: |
            Value is the value of the environment variable.
    EnvironmentCredentials:
      description: |
        EnvironmentCredentials defines the Action and Trigger credentials for the owning Connection. If multiple 
        credentials are defined for each type, they are applied to the request in the order they are defined. This is to
        enable Connections which require both a user session token and an API key to be provided in the request.
      type: object
      properties:
        action:
          type: array
          items:
            $ref: "#/components/schemas/Credential"
        trigger:
          type: array
          items:
            $ref: "#/components/schemas/Credential"
      minProperties: 1
    EnvironmentCredentialsCreate:
      description: |
        EnvironmentCredentialsCreate defines the Action and Trigger credentials for the owning Connection. This supports 
        defining multiple credentials for each type, which are applied to the request in the order they are defined. 
        This is to enable Connections which require both a user session token and an API key to be provided in the 
        request.

        This object can either define a reference to an existing Credential via the InferredReference object, or it can
        define a new Credential via the CredentialCreate object.
      type: object
      properties:
        action:
          type: array
          minItems: 1
          items:
            oneOf:
              - $ref: "#/components/schemas/CredentialCreate"
              - $ref: "#/components/schemas/InferredReference"
        trigger:
          type: array
          minItems: 1
          items:
            oneOf:
              - $ref: "#/components/schemas/CredentialCreate"
              - $ref: "#/components/schemas/InferredReference"
      minProperties: 1
    Environment:
      description: |
        Environment defines the Action and Trigger credentials for the owning Connection, and additional variables 
        which can be used to customize the Connection in a particular environment.
      type: object
      properties:
        id:
          type: string
          format: ulid
          description: |
            ID is the unique identifier of the Environment. Typically this is only used internally and most (if not all)
            public-facing APIs will use the `name` in combination with the Connection's `id` instead.
        name:
          type: string
          description: |
            Name is the name of the Environment.
        credentials:
          $ref: "#/components/schemas/EnvironmentCredentials"
        variables:
          type: array
          items:
            $ref: "#/components/schemas/EnvironmentVariable"
        createdAt:
          type: string
          format: date-time
          description: |
            CreatedAt is the time the Environment was created.
        updatedAt:
          type: string
          format: date-time
          description: |
            UpdatedAt is the time the Environment was last updated.
      required:
        - id
        - name
        - credential
        - variables
        - createdAt
        - updatedAt
    EnvironmentCreate:
      description: |
        EnvironmentCreate defines the environment to create against a Connection.

        The `authSchemeConfig` field is persisted in-place and is not a reference to a Connection's `authSchemeConfig` 
        field. This is because changes to the Connection's `authSchemeConfig` field is not versioned like other 
        entities, and changes to that field would affect all Environments which reference it. In order to update the 
        `authSchemeConfig` in an Environment, the user has to explicitly update the Environment's `authSchemeConfig`.

        The `authSchemeConfig.schemeType` and `credentials.*.type` fields must be compatible with each other otherwise 
        a 400 Bad Request error will be returned. For example, if the `authSchemeConfig.schemeType` is `oauth2` then
        the `credentials.*.type` must be `oauth2-client` or `oauth2-token`.
      type: object
      properties:
        name:
          type: string
          description: |
            Name is the name of the Environment.
        credentials:
          $ref: "#/components/schemas/EnvironmentCredentialsCreate"
        variables:
          type: array
          items:
            $ref: "#/components/schemas/EnvironmentVariable"
      required:
        - name
        - authSchemeConfig
        - credentials
        - variables
    BaseConnection:
      description: |
        BaseConnection holds common fields which exist across all Connection protocols.
      type: object
      properties:
        id:
          type: string
          format: ulid
          description: |
            ID is the unique identifier of the Connection.
        organisationId:
          type: string
          format: ulid
          description: |
            OrganisationID is the unique identifier of the Organisation that owns the Connection.
        name:
          type: string
          description: |
            Name is the user-provided name of the Connection
        type:
          $ref: "#/components/schemas/ConnectionType"
        environments:
          type: array
          description: |
            Environments is a list of all the environments this Connection has.
          items:
            $ref: "#/components/schemas/Environment"
        versions:
          type: array
          description: |
            Versions is a list of all the versions this Connection has.
          items:
            $ref: "#/components/schemas/ConnectionVersion"
      x-ogen-properties:
        organisationId:
          name: OrganisationID
      required:
        - id
        - organisationId
        - name
        - type
        - version
        - isDraft
    HTTPConnection:
      description: |
        HTTPConnection represents a connection to an external system over HTTP.
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseConnection"
        - properties:
            type:
              type: string
              enum:
                - HTTPConnection
            baseUrl:
              type: string
              description: |
                BaseURL is the base URL of all HTTP Actions within the Connection.
            authSchemeConfigs:
              type: array
              items:
                $ref: "#/components/schemas/AuthSchemeConfig"
          required:
            - type
            - baseUrl
            - authSchemeConfigs
    HTTPConnectionCreate:
      description: |
        HTTPConnectionCreate is the input to the CreateHTTPConnection endpoint.
      type: object
      properties:
        name:
          type: string
          description: |
            Name is a user-friendly identifier for a Connection
        baseUrl:
          type: string
          description: |
            BaseURL is the base URL of all HTTP Actions within the Connection.
        authSchemeConfigs:
          type: array
          items:
            $ref: "#/components/schemas/AuthSchemeConfig"
        environments:
          type: array
          items:
            $ref: "#/components/schemas/EnvironmentCreate"
      required:
        - name
        - baseUrl
        - authSchemeConfigs
        - environments
    BigQueryConnection:
      description: |
        BigQueryConnection represents a connection to a Google BigQuery dataset.
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseConnection"
        - properties:
            type:
              type: string
              enum:
                - BigQueryConnection
            datasetId:
              type: string
              description: |
                DatasetID is the ID of the BigQuery dataset, in the format "<project_id>.<dataset_name>"
          required:
            - type
            - environments
          x-ogen-properties:
            datasetId:
              name: DatasetID
    BigQueryConnectionCreate:
      description: |
        BigQueryConnectionCreate is the input to the CreateBigQueryConnection endpoint.
      type: object
      properties:
        name:
          type: string
          description: |
            Name is the user-provided name of the Connection
        datasetId:
          type: string
          description: |
            DatasetID is the ID of the BigQuery dataset, in the format "<project_id>.<dataset_name>"
        environments:
          type: array
          items:
            $ref: "#/components/schemas/EnvironmentCreate"
      required:
        - name
        - environments
      x-ogen-properties:
        datasetId:
          name: DatasetID
    ConnectionType:
      description: |
        ConnectionType denotes the set of all valid connection types.
      type: string
      enum:
        - HTTPConnection
        - BigQueryConnection
    Connection:
      description: |
        Connection represents a connection to an external system.
      type: object
      discriminator:
        propertyName: type
      properties:
        type:
          $ref: "#/components/schemas/ConnectionType"
      oneOf:
        - $ref: "#/components/schemas/HTTPConnection"
        - $ref: "#/components/schemas/BigQueryConnection"
    ConnectionPage:
      description: ConnectionPage is a page of Connections.
      type: object
      allOf:
        - $ref: "#/components/schemas/PageInfo"
        - properties:
            connections:
              type: array
              items:
                $ref: "#/components/schemas/Connection"
          required:
            - connections
    ConnectionVersion:
      description: |
        ConnectionVersion represents a version of a Connection.
      type: object
      properties:
        id:
          type: string
          format: ulid
          description: |
            ID is the unique identifier of the ConnectionVersion, this is typically only used internally and the version
            `name` is used externally in combination with the Connection `id`.
        name:
          type: string
          format: ulid
          description: |
            Name denotes the actual version value for the Connection.
        isLatest:
          type: boolean
          description: |
            IsLatest denotes whether this is the latest version of the Connection.
        isDefault:
          type: boolean
          description: |
            IsDefault denotes whether this is the default version of the Connection.
        createdAt:
          type: string
          format: date-time
          description: |
            CreatedAt is the time at which the ConnectionVersion was created.
        publishedAt:
          format: date-time
          description: |
            PublishedAt is the time at which the ConnectionVersion was published.
          # ogen does not support the `type` keyword as an array
          oneOf:
            - type: string
            - type: "null"
      required:
        - id
        - name
        - createdAt
        - publishedAt
    ConnectionVersionsPage:
      description: ConnectionVersionsPage is a page of ConnectionVersions.
      type: object
      allOf:
        - $ref: "#/components/schemas/PageInfo"
        - properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/ConnectionVersion"
          required:
            - items
    Protocol:
      description: |
        Protocol describes a protocol which is supported by Versori and can be used to communicate with an external 
        system.
      type: object
      properties:
        id:
          description: |
            ID is the unique identifier of the Protocol, this is typically only used internally and the protocol `slug`
            is used externally.
          type: string
        slug:
          description: |
            Slug is human-readable unique identifier of the Protocol in snake-case format.
          type: string
        name:
          description: |
            Name is a human-friendly name to display for the user.
          type: string
        description:
          type: string
          description: |
            Description describes the protocol in human-friendly terminology. This text may be displayed to users via a
            help tooltip or similar.
        iconURL:
          type: string
          format: uri
          description: |
            IconURL provides a URL to access an icon/image which represents the protocol.
      required:
        - id
        - slug
        - name
        - description
        - iconURL
    ProtocolPage:
      description: ProtocolPage is a page of Protocols.
      type: object
      allOf:
        - $ref: "#/components/schemas/PageInfo"
        - properties:
            protocols:
              type: array
              items:
                $ref: "#/components/schemas/Protocol"
          required:
            - protocols
    AuthSchemeType:
      description: |
        Type is a unique identifier of the AuthScheme, this is a snake-case formatted string, see enum values for
        possible options.
      type: string
      enum:
        - none
        - api-key
        - basic-auth
        - oauth2
        #        - google-service-account
        - hmac
    OAuth2Scope:
      description: |
        OAuth2Scope represents a single scope which can be requested by an OAuth2 application.
      type: object
      properties:
        name:
          type: string
          description: |
            Name is the name of the scope as determined by the application to which this Connection is connecting to.
        description:
          type: string
          description: |
            Description describes the scope in human-friendly terminology. This text may be displayed to users via a
            help tooltip or similar.
      required:
        - name
    AuthSchemeConfigOAuth2ClientCredentials:
      description: |
        AuthSchemeConfigOAuth2ClientCredentials is a placeholder object to be used when the OAuth2 flow is set to
        `client_credentials`. There is no other configuration required since the client ID/client secret is provided
        as part of the Environment's Credential.
      type: object
      additionalProperties: false
    AuthSchemeConfigOAuth2AuthorizationCode:
      description: |
        AuthSchemeConfigOAuth2AuthorizationCode defines the credential containing a client ID/client secret which should
        be used in conjunction with the Environment's Credential to issue new access_tokens from a refresh_token.
      type: object
      required:
        - applicationCredential
    AuthSchemeConfigOAuth2Flows:
      description: |
        AuthSchemeConfigOAuth2Flows defines the OAuth2 flows which the external system supports. At least one flow must 
        be defined, when multiple flows are defined the user will be prompted to select which to use when configuring 
        the Environment.
      type: object
      minProperties: 1
      properties:
        clientCredentials:
          $ref: "#/components/schemas/AuthSchemeConfigOAuth2ClientCredentials"
        authorizationCode:
          $ref: "#/components/schemas/AuthSchemeConfigOAuth2AuthorizationCode"
    AuthSchemeConfigNone:
      description: |
        AuthSchemeConfigNone is a placeholder object with the schemeType set to `none`. There is no other configuration
        required.
      type: object
      properties:
        schemeType:
          type: string
          enum:
            - none
      required:
        - schemeType
    AuthSchemeConfigAPIKey:
      description: |
        AuthSchemeConfigAPIKey defines how a Connection uses an API key credential to authenticate with the system.
      type: object
      properties:
        schemeType:
          type: string
          enum:
            - api-key
        name:
          type: string
          description: |
            Name is the query parameter/header/cookie name which will be used to send the API key.
        in:
          type: string
          enum:
            - query
            - header
            - cookie
      required:
        - schemeType
        - name
        - in
    AuthSchemeConfigBasicAuth:
      description: |
        AuthSchemeConfigBasicAuth is a placeholder object with the schemeType set to `basic-auth`. There is no other 
        configuration required.
      type: object
      properties:
        schemeType:
          type: string
          enum:
            - basic-auth
      required:
        - schemeType
    AuthSchemeConfigOAuth2:
      description: |
        AuthSchemeConfigOAuth2 defines how a Connection uses an OAuth2 credential to authenticate with the system.
      type: object
      properties:
        schemeType:
          type: string
          enum:
            - oauth2
        authorizeUrl:
          type: string
          format: uri
          description: |
            AuthorizeURL is the URL which the user will be redirected to in order to authorize the application.
        tokenUrl:
          type: string
          format: uri
          description: |
            TokenURL is the URL which the application will use to issue an access token.
        scopes:
          description: |
            Scopes is the list of OAuth2 scopes which the application supports. The user will be allowed to choose 
            which scopes to request when configuring the Environment.
          type: array
          items:
            $ref: "#/components/schemas/OAuth2Scope"
        flows:
          $ref: "#/components/schemas/AuthSchemeConfigOAuth2Flows"
      required:
        - schemeType
        - authorizeUrl
        - tokenUrl
        - scopes
        - flows
      x-ogen-properties:
        authorizeUrl:
          name: AuthorizeURL
        tokenUrl:
          name: TokenURL
    AuthSchemeConfigGoogleServiceAccount:
      description: |
        AuthSchemeConfigGoogleServiceAccount is a placeholder object with the schemeType set to 
        `google-service-account`. No further configuration is necessary since the actual credential is defined on the
        Environment.
      type: object
      properties:
        schemeType:
          type: string
          enum:
            - google-service-account
      required:
        - schemeType
    AuthSchemeConfigHMAC:
      description: |
        AuthSchemeConfigHMAC defines how a Connection uses an HMAC credential to authenticate with the system.

        This may be used on outbound requests to sign the request body, however it is more commonly used on inbound
        requests (i.e. from Webhook Triggers) to verify the sender of the request is allowed to invoke the Trigger.
      type: object
      properties:
        schemeType:
          type: string
          enum:
            - hmac
        name:
          type: string
          description: |
            Name is the query parameter/header/cookie name which will be used to send the API key.
        in:
          type: string
          enum:
            - query
            - header
            - cookie
        algorithm:
          description: |
            Algorithm defines the hashing algorithm to use when generating the HMAC signature.
          type: string
          enum:
            - sha1
            - sha256
            - sha512
        digestInputs:
          description: |
            DigestInputs defines what parts of a HTTP request are consumed to generate the HMAC signature. Some systems
            only generate the signature from the request body, others may include the URL. The order of this array 
            defines the order in which the input is fed into the hashing function.
          type: array
          items:
            type: string
            enum:
              - body
              - url
      required:
        - schemeType
        - name
        - in
        - algorithm
        - digestInputs
    AuthSchemeConfig:
      description: |
        AuthSchemeConfig defines how a Connection implements the AuthScheme in order to fulfil its authentication 
        requirements. This is purely the configuration and not the actual credential which is used to authenticate. The 
        credential uses this configuration to determine how to authenticate.
      type: object
      discriminator:
        propertyName: schemeType
      properties:
        schemeType:
          $ref: "#/components/schemas/AuthSchemeType"
      oneOf:
        - $ref: "#/components/schemas/AuthSchemeConfigNone"
        - $ref: "#/components/schemas/AuthSchemeConfigAPIKey"
        - $ref: "#/components/schemas/AuthSchemeConfigBasicAuth"
        - $ref: "#/components/schemas/AuthSchemeConfigOAuth2"
        - $ref: "#/components/schemas/AuthSchemeConfigGoogleServiceAccount"
        - $ref: "#/components/schemas/AuthSchemeConfigHMAC"
      required:
        - schemeType
    AuthScheme:
      description: |
        AuthScheme describes an authentication scheme which is supported by Versori and can be used to authenticate
        with an external system.
      type: object
      properties:
        id:
          type: string
          format: ulid
          description: |
            ID is the unique identifier of the AuthScheme, this is typically only used internally and the `slug` is used
            to reference the AuthScheme externally.
        type:
          $ref: "#/components/schemas/AuthSchemeType"
        name:
          type: string
          description: |
            Name is a user-friendly identifier for the AuthScheme
        description:
          type: string
          description: |
            Description describes the authentication scheme in human-friendly terminology. This text may be displayed to
            users via a help tooltip or similar.
      required:
        - id
        - type
        - name
        - description
    AuthSchemePage:
      type: object
      allOf:
        - $ref: "#/components/schemas/PageInfo"
        - properties:
            authSchemes:
              type: array
              items:
                $ref: "#/components/schemas/AuthScheme"
          required:
            - authSchemes
    ErrorField:
      description: ErrorField denotes a field which has an error.
      type: object
      properties:
        field:
          type: string
          description: |
            Field is the name of the field which has an error, this may be a path to a nested field, including array
            elements. The format of this field is of the form: "field1.field2[0].field3"
        message:
          type: string
          description: Message is the error message for this specific field.
    Error:
      type: object
      properties:
        code:
          type: string
          description: Code is a machine-readable error code.
        message:
          type: string
          description: Message is a human-readable error message.
        fields:
          type: array
          items:
            $ref: "#/components/schemas/ErrorField"
      required:
        - code
        - message
  parameters:
    organisation_id:
      name: organisation_id
      in: path
      required: true
      schema:
        type: string
        format: ulid
    connection_id:
      name: connection_id
      in: path
      required: true
      description: |
        ID is the unique identifier of the Connection.
      schema:
        type: string
        format: ulid
    first:
      name: first
      in: query
      required: false
      schema:
        type: integer
        default: 20
    before:
      name: before
      in: query
      required: false
      schema:
        type: string
    after:
      name: after
      in: query
      required: false
      schema:
        type: string
    protocol_slug:
      name: protocol_slug
      in: path
      required: true
      schema:
        type: string
  securitySchemes:
    cookie:
      description: Cookie authentication used by the Versori Platform.
      type: apiKey
      in: cookie
      name: cookie
